import { Directive, ElementRef, Renderer, Input } from '@angular/core';
/**
 * Directive to display custom icons from generated icon font.
 *
 * Example usage:
 * @usage
 * ```html
 * <custom-icon set="mySet" name="myIcon"></custom-icon>
 * ```
 *
 * @author Gerrit Erpenstein
 */
export var CustomIcon = (function () {
    function CustomIcon(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        /**
         * Icon name
         */
        this.iconName = '';
        /**
         * Icon set name
         */
        this.iconSet = '';
    }
    /**
     * Called on input parameter value changes.
     */
    CustomIcon.prototype.ngOnChanges = function (changes) {
        this._update();
    };
    /**
     * Update and set element's css class value.
     * @private
     */
    CustomIcon.prototype._update = function () {
        // remove old css class value
        if (this._class)
            this._renderer.setElementClass(this._elementRef.nativeElement, this._class, false);
        if (!this.iconName || !this.iconSet) {
            // invalid input parameters
            this._class = undefined;
            return;
        }
        // new css class value
        this._class = this.iconSet + '-' + this.iconName;
        this._renderer.setElementClass(this._elementRef.nativeElement, this._class, true);
    };
    CustomIcon.decorators = [
        { type: Directive, args: [{
                    selector: 'custom-icon',
                    host: {
                        'role': 'img'
                    }
                },] },
    ];
    /** @nocollapse */
    CustomIcon.ctorParameters = [
        { type: ElementRef, },
        { type: Renderer, },
    ];
    CustomIcon.propDecorators = {
        'iconName': [{ type: Input, args: ['name',] },],
        'iconSet': [{ type: Input, args: ['set',] },],
    };
    return CustomIcon;
}());
